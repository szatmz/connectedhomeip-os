/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.5-dev */

#ifndef PB_CHIP_RPC_MAIN_GDM_WIFI_BASE_RPC_PB_H_INCLUDED
#define PB_CHIP_RPC_MAIN_GDM_WIFI_BASE_RPC_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _chip_rpc_WIFI_SECURITY_TYPE {
    chip_rpc_WIFI_SECURITY_TYPE_WIFI_AUTH_OPEN = 0,
    chip_rpc_WIFI_SECURITY_TYPE_WIFI_AUTH_WEP = 1,
    chip_rpc_WIFI_SECURITY_TYPE_WIFI_AUTH_WPA_PSK = 2,
    chip_rpc_WIFI_SECURITY_TYPE_WIFI_AUTH_WPA2_PSK = 3,
    chip_rpc_WIFI_SECURITY_TYPE_WIFI_AUTH_WPA_WPA2_PSK = 4,
    chip_rpc_WIFI_SECURITY_TYPE_WIFI_AUTH_WPA2_ENTERPRISE = 5,
    chip_rpc_WIFI_SECURITY_TYPE_WIFI_AUTH_WPA3_PSK = 6,
    chip_rpc_WIFI_SECURITY_TYPE_WIFI_AUTH_WPA2_WPA3_PSK = 7,
    chip_rpc_WIFI_SECURITY_TYPE_WIFI_AUTH_WAPI_PSK = 8
} chip_rpc_WIFI_SECURITY_TYPE;

typedef enum _chip_rpc_CONNECTION_ERROR {
    chip_rpc_CONNECTION_ERROR_OK = 0,
    chip_rpc_CONNECTION_ERROR_UNSPECIFIED = 1,
    chip_rpc_CONNECTION_ERROR_AUTH_EXPIRE = 2,
    chip_rpc_CONNECTION_ERROR_AUTH_LEAVE = 3,
    chip_rpc_CONNECTION_ERROR_ASSOC_EXPIRE = 4,
    chip_rpc_CONNECTION_ERROR_ASSOC_TOOMANY = 5,
    chip_rpc_CONNECTION_ERROR_NOT_AUTHED = 6,
    chip_rpc_CONNECTION_ERROR_NOT_ASSOCED = 7,
    chip_rpc_CONNECTION_ERROR_ASSOC_LEAVE = 8,
    chip_rpc_CONNECTION_ERROR_ASSOC_NOT_AUTHED = 9,
    chip_rpc_CONNECTION_ERROR_DISASSOC_PWRCAP_BAD = 10,
    chip_rpc_CONNECTION_ERROR_DISASSOC_SUPCHAN_BAD = 11,
    chip_rpc_CONNECTION_ERROR_IE_INVALID = 13,
    chip_rpc_CONNECTION_ERROR_MIC_FAILURE = 14,
    chip_rpc_CONNECTION_ERROR_FOURWAY_HANDSHAKE_TIMEOUT = 15,
    chip_rpc_CONNECTION_ERROR_GROUP_KEY_UPDATE_TIMEOUT = 16,
    chip_rpc_CONNECTION_ERROR_IE_IN_4WAY_DIFFERS = 17,
    chip_rpc_CONNECTION_ERROR_GROUP_CIPHER_INVALID = 18,
    chip_rpc_CONNECTION_ERROR_PAIRWISE_CIPHER_INVALID = 19,
    chip_rpc_CONNECTION_ERROR_AKMP_INVALID = 20,
    chip_rpc_CONNECTION_ERROR_UNSUPP_RSN_IE_VERSION = 21,
    chip_rpc_CONNECTION_ERROR_INVALID_RSN_IE_CAP = 22,
    chip_rpc_CONNECTION_ERROR_IEEE802_1X_AUTH_FAILED = 23,
    chip_rpc_CONNECTION_ERROR_CIPHER_SUITE_REJECTED = 24,
    chip_rpc_CONNECTION_ERROR_INVALID_PMKID = 53,
    chip_rpc_CONNECTION_ERROR_BEACON_TIMEOUT = 200,
    chip_rpc_CONNECTION_ERROR_NO_AP_FOUND = 201,
    chip_rpc_CONNECTION_ERROR_AUTH_FAIL = 202,
    chip_rpc_CONNECTION_ERROR_ASSOC_FAIL = 203,
    chip_rpc_CONNECTION_ERROR_HANDSHAKE_TIMEOUT = 204,
    chip_rpc_CONNECTION_ERROR_CONNECTION_FAIL = 205,
    chip_rpc_CONNECTION_ERROR_AP_TSF_RESET = 206,
    chip_rpc_CONNECTION_ERROR_ROAMING = 207
} chip_rpc_CONNECTION_ERROR;

/* Struct definitions */
typedef struct _chip_rpc_Empty {
    char dummy_field;
} chip_rpc_Empty;

typedef struct _chip_rpc_Channel {
    uint32_t channel;
} chip_rpc_Channel;

typedef PB_BYTES_ARRAY_T(32) chip_rpc_ConnectionData_ssid_t;
typedef struct _chip_rpc_ConnectionData {
    chip_rpc_ConnectionData_ssid_t ssid;
    chip_rpc_WIFI_SECURITY_TYPE security_type;
    char secret[64];
} chip_rpc_ConnectionData;

typedef struct _chip_rpc_ConnectionResult {
    chip_rpc_CONNECTION_ERROR error;
} chip_rpc_ConnectionResult;

typedef struct _chip_rpc_IP4Address {
    char address[16];
} chip_rpc_IP4Address;

typedef struct _chip_rpc_IP6Address {
    char address[46];
} chip_rpc_IP6Address;

typedef struct _chip_rpc_MacAddress {
    char mac_address[18];
} chip_rpc_MacAddress;

typedef PB_BYTES_ARRAY_T(32) chip_rpc_ScanConfig_ssid_t;
typedef PB_BYTES_ARRAY_T(6) chip_rpc_ScanConfig_bssid_t;
typedef struct _chip_rpc_ScanConfig {
    pb_size_t ssid_count;
    chip_rpc_ScanConfig_ssid_t ssid[1];
    pb_size_t bssid_count;
    chip_rpc_ScanConfig_bssid_t bssid[1];
    uint32_t channel;
    bool show_hidden;
    bool active_scan;
    uint32_t scan_time_min_ms;
    uint32_t scan_time_max_ms;
} chip_rpc_ScanConfig;

typedef PB_BYTES_ARRAY_T(32) chip_rpc_ScanResult_ssid_t;
typedef PB_BYTES_ARRAY_T(6) chip_rpc_ScanResult_bssid_t;
typedef struct _chip_rpc_ScanResult {
    chip_rpc_ScanResult_ssid_t ssid;
    chip_rpc_ScanResult_bssid_t bssid;
    chip_rpc_WIFI_SECURITY_TYPE security_type;
    uint32_t frequency;
    uint32_t channel;
    int32_t signal;
} chip_rpc_ScanResult;

typedef PB_BYTES_ARRAY_T(32) chip_rpc_Ssid_ssid_t;
typedef struct _chip_rpc_Ssid {
    chip_rpc_Ssid_ssid_t ssid;
} chip_rpc_Ssid;

typedef struct _chip_rpc_State {
    bool connected;
} chip_rpc_State;

typedef struct _chip_rpc_WiFiInterface {
    char interface[20];
} chip_rpc_WiFiInterface;

typedef struct _chip_rpc_ScanResults {
    pb_size_t aps_count;
    chip_rpc_ScanResult aps[20];
} chip_rpc_ScanResults;


/* Helper constants for enums */
#define _chip_rpc_WIFI_SECURITY_TYPE_MIN chip_rpc_WIFI_SECURITY_TYPE_WIFI_AUTH_OPEN
#define _chip_rpc_WIFI_SECURITY_TYPE_MAX chip_rpc_WIFI_SECURITY_TYPE_WIFI_AUTH_WAPI_PSK
#define _chip_rpc_WIFI_SECURITY_TYPE_ARRAYSIZE ((chip_rpc_WIFI_SECURITY_TYPE)(chip_rpc_WIFI_SECURITY_TYPE_WIFI_AUTH_WAPI_PSK+1))

#define _chip_rpc_CONNECTION_ERROR_MIN chip_rpc_CONNECTION_ERROR_OK
#define _chip_rpc_CONNECTION_ERROR_MAX chip_rpc_CONNECTION_ERROR_ROAMING
#define _chip_rpc_CONNECTION_ERROR_ARRAYSIZE ((chip_rpc_CONNECTION_ERROR)(chip_rpc_CONNECTION_ERROR_ROAMING+1))


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define chip_rpc_Empty_init_default              {0}
#define chip_rpc_Channel_init_default            {0}
#define chip_rpc_Ssid_init_default               {{0, {0}}}
#define chip_rpc_State_init_default              {0}
#define chip_rpc_MacAddress_init_default         {""}
#define chip_rpc_WiFiInterface_init_default      {""}
#define chip_rpc_IP4Address_init_default         {""}
#define chip_rpc_IP6Address_init_default         {""}
#define chip_rpc_ScanConfig_init_default         {0, {{0, {0}}}, 0, {{0, {0}}}, 0, 0, 0, 0, 0}
#define chip_rpc_ScanResult_init_default         {{0, {0}}, {0, {0}}, _chip_rpc_WIFI_SECURITY_TYPE_MIN, 0, 0, 0}
#define chip_rpc_ScanResults_init_default        {0, {chip_rpc_ScanResult_init_default, chip_rpc_ScanResult_init_default, chip_rpc_ScanResult_init_default, chip_rpc_ScanResult_init_default, chip_rpc_ScanResult_init_default, chip_rpc_ScanResult_init_default, chip_rpc_ScanResult_init_default, chip_rpc_ScanResult_init_default, chip_rpc_ScanResult_init_default, chip_rpc_ScanResult_init_default, chip_rpc_ScanResult_init_default, chip_rpc_ScanResult_init_default, chip_rpc_ScanResult_init_default, chip_rpc_ScanResult_init_default, chip_rpc_ScanResult_init_default, chip_rpc_ScanResult_init_default, chip_rpc_ScanResult_init_default, chip_rpc_ScanResult_init_default, chip_rpc_ScanResult_init_default, chip_rpc_ScanResult_init_default}}
#define chip_rpc_ConnectionData_init_default     {{0, {0}}, _chip_rpc_WIFI_SECURITY_TYPE_MIN, ""}
#define chip_rpc_ConnectionResult_init_default   {_chip_rpc_CONNECTION_ERROR_MIN}
#define chip_rpc_Empty_init_zero                 {0}
#define chip_rpc_Channel_init_zero               {0}
#define chip_rpc_Ssid_init_zero                  {{0, {0}}}
#define chip_rpc_State_init_zero                 {0}
#define chip_rpc_MacAddress_init_zero            {""}
#define chip_rpc_WiFiInterface_init_zero         {""}
#define chip_rpc_IP4Address_init_zero            {""}
#define chip_rpc_IP6Address_init_zero            {""}
#define chip_rpc_ScanConfig_init_zero            {0, {{0, {0}}}, 0, {{0, {0}}}, 0, 0, 0, 0, 0}
#define chip_rpc_ScanResult_init_zero            {{0, {0}}, {0, {0}}, _chip_rpc_WIFI_SECURITY_TYPE_MIN, 0, 0, 0}
#define chip_rpc_ScanResults_init_zero           {0, {chip_rpc_ScanResult_init_zero, chip_rpc_ScanResult_init_zero, chip_rpc_ScanResult_init_zero, chip_rpc_ScanResult_init_zero, chip_rpc_ScanResult_init_zero, chip_rpc_ScanResult_init_zero, chip_rpc_ScanResult_init_zero, chip_rpc_ScanResult_init_zero, chip_rpc_ScanResult_init_zero, chip_rpc_ScanResult_init_zero, chip_rpc_ScanResult_init_zero, chip_rpc_ScanResult_init_zero, chip_rpc_ScanResult_init_zero, chip_rpc_ScanResult_init_zero, chip_rpc_ScanResult_init_zero, chip_rpc_ScanResult_init_zero, chip_rpc_ScanResult_init_zero, chip_rpc_ScanResult_init_zero, chip_rpc_ScanResult_init_zero, chip_rpc_ScanResult_init_zero}}
#define chip_rpc_ConnectionData_init_zero        {{0, {0}}, _chip_rpc_WIFI_SECURITY_TYPE_MIN, ""}
#define chip_rpc_ConnectionResult_init_zero      {_chip_rpc_CONNECTION_ERROR_MIN}

/* Field tags (for use in manual encoding/decoding) */
#define chip_rpc_Channel_channel_tag             1
#define chip_rpc_ConnectionData_ssid_tag         1
#define chip_rpc_ConnectionData_security_type_tag 2
#define chip_rpc_ConnectionData_secret_tag       3
#define chip_rpc_ConnectionResult_error_tag      1
#define chip_rpc_IP4Address_address_tag          1
#define chip_rpc_IP6Address_address_tag          1
#define chip_rpc_MacAddress_mac_address_tag      1
#define chip_rpc_ScanConfig_ssid_tag             1
#define chip_rpc_ScanConfig_bssid_tag            2
#define chip_rpc_ScanConfig_channel_tag          3
#define chip_rpc_ScanConfig_show_hidden_tag      4
#define chip_rpc_ScanConfig_active_scan_tag      5
#define chip_rpc_ScanConfig_scan_time_min_ms_tag 6
#define chip_rpc_ScanConfig_scan_time_max_ms_tag 7
#define chip_rpc_ScanResult_ssid_tag             1
#define chip_rpc_ScanResult_bssid_tag            2
#define chip_rpc_ScanResult_security_type_tag    3
#define chip_rpc_ScanResult_frequency_tag        4
#define chip_rpc_ScanResult_channel_tag          5
#define chip_rpc_ScanResult_signal_tag           6
#define chip_rpc_Ssid_ssid_tag                   1
#define chip_rpc_State_connected_tag             1
#define chip_rpc_WiFiInterface_interface_tag     1
#define chip_rpc_ScanResults_aps_tag             1

/* Struct field encoding specification for nanopb */
#define chip_rpc_Empty_FIELDLIST(X, a) \

#define chip_rpc_Empty_CALLBACK NULL
#define chip_rpc_Empty_DEFAULT NULL

#define chip_rpc_Channel_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   channel,           1)
#define chip_rpc_Channel_CALLBACK NULL
#define chip_rpc_Channel_DEFAULT NULL

#define chip_rpc_Ssid_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BYTES,    ssid,              1)
#define chip_rpc_Ssid_CALLBACK NULL
#define chip_rpc_Ssid_DEFAULT NULL

#define chip_rpc_State_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     connected,         1)
#define chip_rpc_State_CALLBACK NULL
#define chip_rpc_State_DEFAULT NULL

#define chip_rpc_MacAddress_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   mac_address,       1)
#define chip_rpc_MacAddress_CALLBACK NULL
#define chip_rpc_MacAddress_DEFAULT NULL

#define chip_rpc_WiFiInterface_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   interface,         1)
#define chip_rpc_WiFiInterface_CALLBACK NULL
#define chip_rpc_WiFiInterface_DEFAULT NULL

#define chip_rpc_IP4Address_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   address,           1)
#define chip_rpc_IP4Address_CALLBACK NULL
#define chip_rpc_IP4Address_DEFAULT NULL

#define chip_rpc_IP6Address_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   address,           1)
#define chip_rpc_IP6Address_CALLBACK NULL
#define chip_rpc_IP6Address_DEFAULT NULL

#define chip_rpc_ScanConfig_FIELDLIST(X, a) \
X(a, STATIC,   REPEATED, BYTES,    ssid,              1) \
X(a, STATIC,   REPEATED, BYTES,    bssid,             2) \
X(a, STATIC,   SINGULAR, UINT32,   channel,           3) \
X(a, STATIC,   SINGULAR, BOOL,     show_hidden,       4) \
X(a, STATIC,   SINGULAR, BOOL,     active_scan,       5) \
X(a, STATIC,   SINGULAR, UINT32,   scan_time_min_ms,   6) \
X(a, STATIC,   SINGULAR, UINT32,   scan_time_max_ms,   7)
#define chip_rpc_ScanConfig_CALLBACK NULL
#define chip_rpc_ScanConfig_DEFAULT NULL

#define chip_rpc_ScanResult_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BYTES,    ssid,              1) \
X(a, STATIC,   SINGULAR, BYTES,    bssid,             2) \
X(a, STATIC,   SINGULAR, UENUM,    security_type,     3) \
X(a, STATIC,   SINGULAR, UINT32,   frequency,         4) \
X(a, STATIC,   SINGULAR, UINT32,   channel,           5) \
X(a, STATIC,   SINGULAR, INT32,    signal,            6)
#define chip_rpc_ScanResult_CALLBACK NULL
#define chip_rpc_ScanResult_DEFAULT NULL

#define chip_rpc_ScanResults_FIELDLIST(X, a) \
X(a, STATIC,   REPEATED, MESSAGE,  aps,               1)
#define chip_rpc_ScanResults_CALLBACK NULL
#define chip_rpc_ScanResults_DEFAULT NULL
#define chip_rpc_ScanResults_aps_MSGTYPE chip_rpc_ScanResult

#define chip_rpc_ConnectionData_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BYTES,    ssid,              1) \
X(a, STATIC,   SINGULAR, UENUM,    security_type,     2) \
X(a, STATIC,   SINGULAR, STRING,   secret,            3)
#define chip_rpc_ConnectionData_CALLBACK NULL
#define chip_rpc_ConnectionData_DEFAULT NULL

#define chip_rpc_ConnectionResult_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    error,             1)
#define chip_rpc_ConnectionResult_CALLBACK NULL
#define chip_rpc_ConnectionResult_DEFAULT NULL

extern const pb_msgdesc_t chip_rpc_Empty_msg;
extern const pb_msgdesc_t chip_rpc_Channel_msg;
extern const pb_msgdesc_t chip_rpc_Ssid_msg;
extern const pb_msgdesc_t chip_rpc_State_msg;
extern const pb_msgdesc_t chip_rpc_MacAddress_msg;
extern const pb_msgdesc_t chip_rpc_WiFiInterface_msg;
extern const pb_msgdesc_t chip_rpc_IP4Address_msg;
extern const pb_msgdesc_t chip_rpc_IP6Address_msg;
extern const pb_msgdesc_t chip_rpc_ScanConfig_msg;
extern const pb_msgdesc_t chip_rpc_ScanResult_msg;
extern const pb_msgdesc_t chip_rpc_ScanResults_msg;
extern const pb_msgdesc_t chip_rpc_ConnectionData_msg;
extern const pb_msgdesc_t chip_rpc_ConnectionResult_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define chip_rpc_Empty_fields &chip_rpc_Empty_msg
#define chip_rpc_Channel_fields &chip_rpc_Channel_msg
#define chip_rpc_Ssid_fields &chip_rpc_Ssid_msg
#define chip_rpc_State_fields &chip_rpc_State_msg
#define chip_rpc_MacAddress_fields &chip_rpc_MacAddress_msg
#define chip_rpc_WiFiInterface_fields &chip_rpc_WiFiInterface_msg
#define chip_rpc_IP4Address_fields &chip_rpc_IP4Address_msg
#define chip_rpc_IP6Address_fields &chip_rpc_IP6Address_msg
#define chip_rpc_ScanConfig_fields &chip_rpc_ScanConfig_msg
#define chip_rpc_ScanResult_fields &chip_rpc_ScanResult_msg
#define chip_rpc_ScanResults_fields &chip_rpc_ScanResults_msg
#define chip_rpc_ConnectionData_fields &chip_rpc_ConnectionData_msg
#define chip_rpc_ConnectionResult_fields &chip_rpc_ConnectionResult_msg

/* Maximum encoded size of messages (where known) */
#define chip_rpc_Empty_size                      0
#define chip_rpc_Channel_size                    6
#define chip_rpc_Ssid_size                       34
#define chip_rpc_State_size                      2
#define chip_rpc_MacAddress_size                 19
#define chip_rpc_WiFiInterface_size              21
#define chip_rpc_IP4Address_size                 17
#define chip_rpc_IP6Address_size                 47
#define chip_rpc_ScanConfig_size                 66
#define chip_rpc_ScanResult_size                 67
#define chip_rpc_ScanResults_size                1380
#define chip_rpc_ConnectionData_size             101
#define chip_rpc_ConnectionResult_size           3

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif

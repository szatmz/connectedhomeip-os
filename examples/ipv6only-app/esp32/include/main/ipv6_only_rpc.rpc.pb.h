// ipv6_only_rpc.rpc.pb.h automatically generated by pw_rpc_codegen 0.2.0
// on 2021-02-11T22:39:27.659357
// clang-format off
#pragma once

#include <array>
#include <cstdint>
#include <type_traits>

#include "main/ipv6_only_rpc.pb.h"
#include "pw_rpc/internal/method_lookup.h"
#include "pw_rpc/internal/nanopb_method_union.h"
#include "pw_rpc/nanopb_client_call.h"
#include "pw_rpc/server_context.h"
#include "pw_rpc/service.h"

namespace chip::rpc {
namespace generated {

template <typename Implementation>
class TestService : public ::pw::rpc::Service {
 public:
  using ServerContext = ::pw::rpc::ServerContext;
  template <typename T>
  using ServerWriter = ::pw::rpc::ServerWriter<T>;

  constexpr TestService()
      : ::pw::rpc::Service(kServiceId, kMethods) {}

  TestService(const TestService&) = delete;
  TestService& operator=(const TestService&) = delete;

  static constexpr const char* name() { return "TestService"; }

  // Used by MethodLookup to identify the generated service base.
  constexpr void _PwRpcInternalGeneratedBase() const {}

 private:
  friend class ::pw::rpc::internal::MethodLookup;

  // Hash of "chip.rpc.TestService".
  static constexpr uint32_t kServiceId = 0x098fe62c;

  static constexpr std::array<::pw::rpc::internal::NanopbMethodUnion, 1> kMethods = {
      ::pw::rpc::internal::GetNanopbOrRawMethodFor<&Implementation::PingTest, ::pw::rpc::internal::MethodType::kServerStreaming>(
          0x34294dec,  // Hash of "PingTest"
          chip_rpc_PingTestConfig_fields,
          chip_rpc_PingTestResponse_fields),
  };

  static constexpr std::array<uint32_t, 1> kMethodIds = {
      0x34294dec,  // Hash of "PingTest"
  };

};

}  // namespace generated

namespace nanopb {

class TestServiceClient {
 public:
  template <typename T>
  using NanopbClientCall = ::pw::rpc::NanopbClientCall<T>;

  TestServiceClient() = delete;

  static NanopbClientCall<
    ::pw::rpc::ServerStreamingResponseHandler<chip_rpc_PingTestResponse>>
  PingTest(::pw::rpc::Channel& channel,
           const chip_rpc_PingTestConfig& request,
           ::pw::rpc::ServerStreamingResponseHandler<chip_rpc_PingTestResponse>& callback) {
    NanopbClientCall<::pw::rpc::ServerStreamingResponseHandler<chip_rpc_PingTestResponse>>
        call(&channel,
             kServiceId,
             0x34294dec,  // Hash of "PingTest"
             callback,
             chip_rpc_PingTestConfig_fields,
             chip_rpc_PingTestResponse_fields);
    call.SendRequest(&request);
    return call;
  }

 private:
  // Hash of "chip.rpc.TestService".
  static constexpr uint32_t kServiceId = 0x098fe62c;
};

}  // namespace nanopb

}  // namespace chip::rpc

#ifdef _PW_RPC_COMPILE_GENERATED_SERVICE_STUBS

/*
    ____                __                          __        __  _
   /  _/___ ___  ____  / /__  ____ ___  ___  ____  / /_____ _/ /_(_)___  ____
   / // __ `__ \/ __ \/ / _ \/ __ `__ \/ _ \/ __ \/ __/ __ `/ __/ / __ \/ __ \
 _/ // / / / / / /_/ / /  __/ / / / / /  __/ / / / /_/ /_/ / /_/ / /_/ / / / /
/___/_/ /_/ /_/ .___/_/\___/_/ /_/ /_/\___/_/ /_/\__/\__,_/\__/_/\____/_/ /_/
             /_/
   _____ __        __         __
  / ___// /___  __/ /_  _____/ /
  \__ \/ __/ / / / __ \/ ___/ /
 ___/ / /_/ /_/ / /_/ (__  )_/
/____/\__/\__,_/_.___/____(_)

*/
// This section provides stub implementations of the RPC services in this file.
// The code below may be referenced or copied to serve as a starting point for
// your RPC service implementations.

#include "main/ipv6_only_rpc.rpc.pb.h"

namespace chip::rpc {

class TestService : public generated::TestService<TestService> {
 public:
  void PingTest(ServerContext&, const chip_rpc_PingTestConfig& request, ServerWriter<chip_rpc_PingTestResponse>& writer) {
    // TODO: Read the request as appropriate for your application
    static_cast<void>(request);
    // TODO: Send responses with the writer as appropriate for your application
    static_cast<void>(writer);
  }
};

}  // namespace chip::rpc

#endif  // _PW_RPC_COMPILE_GENERATED_SERVICE_STUBS

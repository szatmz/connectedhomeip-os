// gdm_wifi_base_rpc.rpc.pb.h automatically generated by pw_rpc_codegen 0.2.0
// on 2021-02-18T20:41:48.689960
// clang-format off
#pragma once

#include <array>
#include <cstdint>
#include <type_traits>

#include "main/gdm_wifi_base_rpc.pb.h"
#include "pw_rpc/internal/method_lookup.h"
#include "pw_rpc/internal/nanopb_method_union.h"
#include "pw_rpc/nanopb_client_call.h"
#include "pw_rpc/server_context.h"
#include "pw_rpc/service.h"

namespace chip::rpc {
namespace generated {

template <typename Implementation>
class GDMWifiBase : public ::pw::rpc::Service {
 public:
  using ServerContext = ::pw::rpc::ServerContext;
  template <typename T>
  using ServerWriter = ::pw::rpc::ServerWriter<T>;

  constexpr GDMWifiBase()
      : ::pw::rpc::Service(kServiceId, kMethods) {}

  GDMWifiBase(const GDMWifiBase&) = delete;
  GDMWifiBase& operator=(const GDMWifiBase&) = delete;

  static constexpr const char* name() { return "GDMWifiBase"; }

  // Used by MethodLookup to identify the generated service base.
  constexpr void _PwRpcInternalGeneratedBase() const {}

 private:
  friend class ::pw::rpc::internal::MethodLookup;

  // Hash of "chip.rpc.GDMWifiBase".
  static constexpr uint32_t kServiceId = 0x572f3d9f;

  static constexpr std::array<::pw::rpc::internal::NanopbMethodUnion, 11> kMethods = {
      ::pw::rpc::internal::GetNanopbOrRawMethodFor<&Implementation::GetChannel, ::pw::rpc::internal::MethodType::kUnary>(
          0x3c9ddd77,  // Hash of "GetChannel"
          chip_rpc_Empty_fields,
          chip_rpc_Channel_fields),
      ::pw::rpc::internal::GetNanopbOrRawMethodFor<&Implementation::GetSsid, ::pw::rpc::internal::MethodType::kUnary>(
          0xcd318416,  // Hash of "GetSsid"
          chip_rpc_Empty_fields,
          chip_rpc_Ssid_fields),
      ::pw::rpc::internal::GetNanopbOrRawMethodFor<&Implementation::GetState, ::pw::rpc::internal::MethodType::kUnary>(
          0xac4983a3,  // Hash of "GetState"
          chip_rpc_Empty_fields,
          chip_rpc_State_fields),
      ::pw::rpc::internal::GetNanopbOrRawMethodFor<&Implementation::GetMacAddress, ::pw::rpc::internal::MethodType::kUnary>(
          0x3eaeee12,  // Hash of "GetMacAddress"
          chip_rpc_Empty_fields,
          chip_rpc_MacAddress_fields),
      ::pw::rpc::internal::GetNanopbOrRawMethodFor<&Implementation::GetWiFiInterface, ::pw::rpc::internal::MethodType::kUnary>(
          0x4c2dbb9e,  // Hash of "GetWiFiInterface"
          chip_rpc_Empty_fields,
          chip_rpc_WiFiInterface_fields),
      ::pw::rpc::internal::GetNanopbOrRawMethodFor<&Implementation::GetIP4Address, ::pw::rpc::internal::MethodType::kUnary>(
          0x64293330,  // Hash of "GetIP4Address"
          chip_rpc_Empty_fields,
          chip_rpc_IP4Address_fields),
      ::pw::rpc::internal::GetNanopbOrRawMethodFor<&Implementation::GetIP6Address, ::pw::rpc::internal::MethodType::kUnary>(
          0x107f1032,  // Hash of "GetIP6Address"
          chip_rpc_Empty_fields,
          chip_rpc_IP6Address_fields),
      ::pw::rpc::internal::GetNanopbOrRawMethodFor<&Implementation::StartScan, ::pw::rpc::internal::MethodType::kServerStreaming>(
          0xd5b1186a,  // Hash of "StartScan"
          chip_rpc_ScanConfig_fields,
          chip_rpc_ScanResults_fields),
      ::pw::rpc::internal::GetNanopbOrRawMethodFor<&Implementation::StopScan, ::pw::rpc::internal::MethodType::kUnary>(
          0x9f11ef47,  // Hash of "StopScan"
          chip_rpc_Empty_fields,
          chip_rpc_Empty_fields),
      ::pw::rpc::internal::GetNanopbOrRawMethodFor<&Implementation::Connect, ::pw::rpc::internal::MethodType::kUnary>(
          0xda8b723d,  // Hash of "Connect"
          chip_rpc_ConnectionData_fields,
          chip_rpc_ConnectionResult_fields),
      ::pw::rpc::internal::GetNanopbOrRawMethodFor<&Implementation::Disconnect, ::pw::rpc::internal::MethodType::kUnary>(
          0x6f2e28e6,  // Hash of "Disconnect"
          chip_rpc_Empty_fields,
          chip_rpc_Empty_fields),
  };

  static constexpr std::array<uint32_t, 11> kMethodIds = {
      0x3c9ddd77,  // Hash of "GetChannel"
      0xcd318416,  // Hash of "GetSsid"
      0xac4983a3,  // Hash of "GetState"
      0x3eaeee12,  // Hash of "GetMacAddress"
      0x4c2dbb9e,  // Hash of "GetWiFiInterface"
      0x64293330,  // Hash of "GetIP4Address"
      0x107f1032,  // Hash of "GetIP6Address"
      0xd5b1186a,  // Hash of "StartScan"
      0x9f11ef47,  // Hash of "StopScan"
      0xda8b723d,  // Hash of "Connect"
      0x6f2e28e6,  // Hash of "Disconnect"
  };

};

}  // namespace generated

namespace nanopb {

class GDMWifiBaseClient {
 public:
  template <typename T>
  using NanopbClientCall = ::pw::rpc::NanopbClientCall<T>;

  GDMWifiBaseClient() = delete;

  static NanopbClientCall<
    ::pw::rpc::UnaryResponseHandler<chip_rpc_Channel>>
  GetChannel(::pw::rpc::Channel& channel,
             const chip_rpc_Empty& request,
             ::pw::rpc::UnaryResponseHandler<chip_rpc_Channel>& callback) {
    NanopbClientCall<::pw::rpc::UnaryResponseHandler<chip_rpc_Channel>>
        call(&channel,
             kServiceId,
             0x3c9ddd77,  // Hash of "GetChannel"
             callback,
             chip_rpc_Empty_fields,
             chip_rpc_Channel_fields);
    call.SendRequest(&request);
    return call;
  }

  static NanopbClientCall<
    ::pw::rpc::UnaryResponseHandler<chip_rpc_Ssid>>
  GetSsid(::pw::rpc::Channel& channel,
          const chip_rpc_Empty& request,
          ::pw::rpc::UnaryResponseHandler<chip_rpc_Ssid>& callback) {
    NanopbClientCall<::pw::rpc::UnaryResponseHandler<chip_rpc_Ssid>>
        call(&channel,
             kServiceId,
             0xcd318416,  // Hash of "GetSsid"
             callback,
             chip_rpc_Empty_fields,
             chip_rpc_Ssid_fields);
    call.SendRequest(&request);
    return call;
  }

  static NanopbClientCall<
    ::pw::rpc::UnaryResponseHandler<chip_rpc_State>>
  GetState(::pw::rpc::Channel& channel,
           const chip_rpc_Empty& request,
           ::pw::rpc::UnaryResponseHandler<chip_rpc_State>& callback) {
    NanopbClientCall<::pw::rpc::UnaryResponseHandler<chip_rpc_State>>
        call(&channel,
             kServiceId,
             0xac4983a3,  // Hash of "GetState"
             callback,
             chip_rpc_Empty_fields,
             chip_rpc_State_fields);
    call.SendRequest(&request);
    return call;
  }

  static NanopbClientCall<
    ::pw::rpc::UnaryResponseHandler<chip_rpc_MacAddress>>
  GetMacAddress(::pw::rpc::Channel& channel,
                const chip_rpc_Empty& request,
                ::pw::rpc::UnaryResponseHandler<chip_rpc_MacAddress>& callback) {
    NanopbClientCall<::pw::rpc::UnaryResponseHandler<chip_rpc_MacAddress>>
        call(&channel,
             kServiceId,
             0x3eaeee12,  // Hash of "GetMacAddress"
             callback,
             chip_rpc_Empty_fields,
             chip_rpc_MacAddress_fields);
    call.SendRequest(&request);
    return call;
  }

  static NanopbClientCall<
    ::pw::rpc::UnaryResponseHandler<chip_rpc_WiFiInterface>>
  GetWiFiInterface(::pw::rpc::Channel& channel,
                   const chip_rpc_Empty& request,
                   ::pw::rpc::UnaryResponseHandler<chip_rpc_WiFiInterface>& callback) {
    NanopbClientCall<::pw::rpc::UnaryResponseHandler<chip_rpc_WiFiInterface>>
        call(&channel,
             kServiceId,
             0x4c2dbb9e,  // Hash of "GetWiFiInterface"
             callback,
             chip_rpc_Empty_fields,
             chip_rpc_WiFiInterface_fields);
    call.SendRequest(&request);
    return call;
  }

  static NanopbClientCall<
    ::pw::rpc::UnaryResponseHandler<chip_rpc_IP4Address>>
  GetIP4Address(::pw::rpc::Channel& channel,
                const chip_rpc_Empty& request,
                ::pw::rpc::UnaryResponseHandler<chip_rpc_IP4Address>& callback) {
    NanopbClientCall<::pw::rpc::UnaryResponseHandler<chip_rpc_IP4Address>>
        call(&channel,
             kServiceId,
             0x64293330,  // Hash of "GetIP4Address"
             callback,
             chip_rpc_Empty_fields,
             chip_rpc_IP4Address_fields);
    call.SendRequest(&request);
    return call;
  }

  static NanopbClientCall<
    ::pw::rpc::UnaryResponseHandler<chip_rpc_IP6Address>>
  GetIP6Address(::pw::rpc::Channel& channel,
                const chip_rpc_Empty& request,
                ::pw::rpc::UnaryResponseHandler<chip_rpc_IP6Address>& callback) {
    NanopbClientCall<::pw::rpc::UnaryResponseHandler<chip_rpc_IP6Address>>
        call(&channel,
             kServiceId,
             0x107f1032,  // Hash of "GetIP6Address"
             callback,
             chip_rpc_Empty_fields,
             chip_rpc_IP6Address_fields);
    call.SendRequest(&request);
    return call;
  }

  static NanopbClientCall<
    ::pw::rpc::ServerStreamingResponseHandler<chip_rpc_ScanResults>>
  StartScan(::pw::rpc::Channel& channel,
            const chip_rpc_ScanConfig& request,
            ::pw::rpc::ServerStreamingResponseHandler<chip_rpc_ScanResults>& callback) {
    NanopbClientCall<::pw::rpc::ServerStreamingResponseHandler<chip_rpc_ScanResults>>
        call(&channel,
             kServiceId,
             0xd5b1186a,  // Hash of "StartScan"
             callback,
             chip_rpc_ScanConfig_fields,
             chip_rpc_ScanResults_fields);
    call.SendRequest(&request);
    return call;
  }

  static NanopbClientCall<
    ::pw::rpc::UnaryResponseHandler<chip_rpc_Empty>>
  StopScan(::pw::rpc::Channel& channel,
           const chip_rpc_Empty& request,
           ::pw::rpc::UnaryResponseHandler<chip_rpc_Empty>& callback) {
    NanopbClientCall<::pw::rpc::UnaryResponseHandler<chip_rpc_Empty>>
        call(&channel,
             kServiceId,
             0x9f11ef47,  // Hash of "StopScan"
             callback,
             chip_rpc_Empty_fields,
             chip_rpc_Empty_fields);
    call.SendRequest(&request);
    return call;
  }

  static NanopbClientCall<
    ::pw::rpc::UnaryResponseHandler<chip_rpc_ConnectionResult>>
  Connect(::pw::rpc::Channel& channel,
          const chip_rpc_ConnectionData& request,
          ::pw::rpc::UnaryResponseHandler<chip_rpc_ConnectionResult>& callback) {
    NanopbClientCall<::pw::rpc::UnaryResponseHandler<chip_rpc_ConnectionResult>>
        call(&channel,
             kServiceId,
             0xda8b723d,  // Hash of "Connect"
             callback,
             chip_rpc_ConnectionData_fields,
             chip_rpc_ConnectionResult_fields);
    call.SendRequest(&request);
    return call;
  }

  static NanopbClientCall<
    ::pw::rpc::UnaryResponseHandler<chip_rpc_Empty>>
  Disconnect(::pw::rpc::Channel& channel,
             const chip_rpc_Empty& request,
             ::pw::rpc::UnaryResponseHandler<chip_rpc_Empty>& callback) {
    NanopbClientCall<::pw::rpc::UnaryResponseHandler<chip_rpc_Empty>>
        call(&channel,
             kServiceId,
             0x6f2e28e6,  // Hash of "Disconnect"
             callback,
             chip_rpc_Empty_fields,
             chip_rpc_Empty_fields);
    call.SendRequest(&request);
    return call;
  }

 private:
  // Hash of "chip.rpc.GDMWifiBase".
  static constexpr uint32_t kServiceId = 0x572f3d9f;
};

}  // namespace nanopb

}  // namespace chip::rpc

#ifdef _PW_RPC_COMPILE_GENERATED_SERVICE_STUBS

/*
    ____                __                          __        __  _
   /  _/___ ___  ____  / /__  ____ ___  ___  ____  / /_____ _/ /_(_)___  ____
   / // __ `__ \/ __ \/ / _ \/ __ `__ \/ _ \/ __ \/ __/ __ `/ __/ / __ \/ __ \
 _/ // / / / / / /_/ / /  __/ / / / / /  __/ / / / /_/ /_/ / /_/ / /_/ / / / /
/___/_/ /_/ /_/ .___/_/\___/_/ /_/ /_/\___/_/ /_/\__/\__,_/\__/_/\____/_/ /_/
             /_/
   _____ __        __         __
  / ___// /___  __/ /_  _____/ /
  \__ \/ __/ / / / __ \/ ___/ /
 ___/ / /_/ /_/ / /_/ (__  )_/
/____/\__/\__,_/_.___/____(_)

*/
// This section provides stub implementations of the RPC services in this file.
// The code below may be referenced or copied to serve as a starting point for
// your RPC service implementations.

#include "main/gdm_wifi_base_rpc.rpc.pb.h"

namespace chip::rpc {

class GDMWifiBase : public generated::GDMWifiBase<GDMWifiBase> {
 public:
  pw::Status GetChannel(ServerContext&, const chip_rpc_Empty& request, chip_rpc_Channel& response) {
    // TODO: Read the request as appropriate for your application
    static_cast<void>(request);
    // TODO: Fill in the response as appropriate for your application
    static_cast<void>(response);
    return pw::Status::Unimplemented();
  }

  pw::Status GetSsid(ServerContext&, const chip_rpc_Empty& request, chip_rpc_Ssid& response) {
    // TODO: Read the request as appropriate for your application
    static_cast<void>(request);
    // TODO: Fill in the response as appropriate for your application
    static_cast<void>(response);
    return pw::Status::Unimplemented();
  }

  pw::Status GetState(ServerContext&, const chip_rpc_Empty& request, chip_rpc_State& response) {
    // TODO: Read the request as appropriate for your application
    static_cast<void>(request);
    // TODO: Fill in the response as appropriate for your application
    static_cast<void>(response);
    return pw::Status::Unimplemented();
  }

  pw::Status GetMacAddress(ServerContext&, const chip_rpc_Empty& request, chip_rpc_MacAddress& response) {
    // TODO: Read the request as appropriate for your application
    static_cast<void>(request);
    // TODO: Fill in the response as appropriate for your application
    static_cast<void>(response);
    return pw::Status::Unimplemented();
  }

  pw::Status GetWiFiInterface(ServerContext&, const chip_rpc_Empty& request, chip_rpc_WiFiInterface& response) {
    // TODO: Read the request as appropriate for your application
    static_cast<void>(request);
    // TODO: Fill in the response as appropriate for your application
    static_cast<void>(response);
    return pw::Status::Unimplemented();
  }

  pw::Status GetIP4Address(ServerContext&, const chip_rpc_Empty& request, chip_rpc_IP4Address& response) {
    // TODO: Read the request as appropriate for your application
    static_cast<void>(request);
    // TODO: Fill in the response as appropriate for your application
    static_cast<void>(response);
    return pw::Status::Unimplemented();
  }

  pw::Status GetIP6Address(ServerContext&, const chip_rpc_Empty& request, chip_rpc_IP6Address& response) {
    // TODO: Read the request as appropriate for your application
    static_cast<void>(request);
    // TODO: Fill in the response as appropriate for your application
    static_cast<void>(response);
    return pw::Status::Unimplemented();
  }

  void StartScan(ServerContext&, const chip_rpc_ScanConfig& request, ServerWriter<chip_rpc_ScanResults>& writer) {
    // TODO: Read the request as appropriate for your application
    static_cast<void>(request);
    // TODO: Send responses with the writer as appropriate for your application
    static_cast<void>(writer);
  }

  pw::Status StopScan(ServerContext&, const chip_rpc_Empty& request, chip_rpc_Empty& response) {
    // TODO: Read the request as appropriate for your application
    static_cast<void>(request);
    // TODO: Fill in the response as appropriate for your application
    static_cast<void>(response);
    return pw::Status::Unimplemented();
  }

  pw::Status Connect(ServerContext&, const chip_rpc_ConnectionData& request, chip_rpc_ConnectionResult& response) {
    // TODO: Read the request as appropriate for your application
    static_cast<void>(request);
    // TODO: Fill in the response as appropriate for your application
    static_cast<void>(response);
    return pw::Status::Unimplemented();
  }

  pw::Status Disconnect(ServerContext&, const chip_rpc_Empty& request, chip_rpc_Empty& response) {
    // TODO: Read the request as appropriate for your application
    static_cast<void>(request);
    // TODO: Fill in the response as appropriate for your application
    static_cast<void>(response);
    return pw::Status::Unimplemented();
  }
};

}  // namespace chip::rpc

#endif  // _PW_RPC_COMPILE_GENERATED_SERVICE_STUBS
